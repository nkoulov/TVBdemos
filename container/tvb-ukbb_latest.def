Bootstrap: library
From: ubuntu:18.04

%post

    apt update -y
    apt install -y --no-install-recommends software-properties-common
    add-apt-repository -y universe

    add-apt-repository -y ppa:ubuntu-toolchain-r/test
    apt update -y
    apt upgrade -y
    # apt install -y gcc-9


    apt update && apt install -y --no-install-recommends \
    lsb-core bsdtar zip unzip gzip curl jq wget python-pip bc dc strace \
    software-properties-common xvfb tcsh ca-certificates

    # apt build-dep mesa
    add-apt-repository ppa:graphics-drivers/ppa
    apt update

    
    DEBIAN_FRONTEND=noninteractive apt -y install libgl1-mesa-dev libgl1-mesa-dri libglu1-mesa-dev freeglut3-dev mesa-common-dev \
    tclsh wish openjdk-8-jdk libx11-dev xorg-dev libglew1.5-dev libgl1-mesa-glx \
    mesa-utils freeglut3 libglw1-mesa libglw1-mesa-dev 
    xauth xorg openbox xserver-xorg libvte-common libvte-dev \
    libgomp1 libice6 libopenblas-base libxcursor1 libxft2 libxinerama1 libxrandr2 \
    libxrender1 libxt6 libfontconfig1 libfreetype6 freeglut3 libgtk-3-0 libgtk-3-dev \
    libsdl1.2-dev libsdl1.2debian libsm6 gstreamer1.0-plugins-base \
    ninja-build libosmesa6 libosmesa6-dev


    # vim8 because the creator of this image is a vim user
    add-apt-repository ppa:jonathonf/vim
    apt update -y
    apt install -y vim

    apt clea

    mkdir -p /opt/convert3d
    curl -fsSL https://sourceforge.net/projects/c3d/files/c3d/Nightly/c3d-nightly-Linux-x86_64.tar.gz/download \
    | tar -xz -C /opt/convert3d --strip-components 1

    export PATH="/opt/convert3d/bin:$PATH"


    apt install -y --no-install-recommends r-base r-cran-devtools \
    libblas-dev liblapack-dev gfortran r-cran-catools r-cran-gplots g++ && \
    Rscript -e 'require(devtools); install_version("kernlab", version="0.9-24")' && \
    Rscript -e 'require(devtools); install_version("ROCR", version="1.0-7")' && \
    Rscript -e 'require(devtools); install_version("class", version="7.3-14")' && \
    Rscript -e 'require(devtools); install_version("mvtnorm", version="1.0-8")' && \
    Rscript -e 'require(devtools); install_version("multcomp", version="1.4-8")' && \
    Rscript -e 'require(devtools); install_version("coin", version="1.2-2")' && \
    Rscript -e 'require(devtools); install_version("party", version="1.0-25")' && \
    Rscript -e 'require(devtools); install_version("e1071", version="1.6-7")' && \
    Rscript -e 'require(devtools); install_version("randomForest", version="4.6-12")'

    # install conda
    curl https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o mc.sh
    bash mc.sh -bfp /opt/miniconda3
    rm -f mc.sh

    __conda_setup="$('/opt/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "/opt/miniconda3/etc/profile.d/conda.sh" ]; then
            . "/opt/miniconda3/etc/profile.d/conda.sh"
        else
            export PATH="/opt/miniconda3/bin:$PATH"
        fi
    fi
    unset __conda_setup

    echo ". /opt/miniconda3/etc/profile.d/conda.sh" >> $SINGULARITY_ENVIRONMENT    
    /opt/miniconda3/bin/conda init bash
    eval $(conda shell.bash hook)

    yes | conda update conda
    conda install -y -c numba cudatoolkit=9.1

    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/miniconda3/lib"

    # just so we have them
    conda install -y -c conda-forge vim git



    # extract and install TVB-UKBB pipeline
    cd /opt

    wget https://github.com/McIntosh-Lab-RRI/tvb-ukbb/releases/download/1.3/tvb-pipeline_installer_1.3.zip


    unzip /opt/tvb-pipeline_installer_1.3.zip
    rm -f tvb-pipeline_installer_1.3.zip
    cd tvb-pipeline
    # mv ../tvb-ukbb .
    # yes | ./install_ukbb_norepo.sh
    yes | ./install_ukbb_singularity.sh

    conda clean -y --all
    # conda deactivate

    mkdir /opt/mcr && mkdir /mcr-install && cd /mcr-install && \
    wget https://ssd.mathworks.com/supportfiles/downloads/R2017b/deployment_files/R2017b/installers/glnxa64/MCR_R2017b_glnxa64_installer.zip && \
    unzip MCR_R2017b_glnxa64_installer.zip && \
    rm -rf MCR_R2017b_glnxa64_installer.zip && \
    ./install -destinationFolder /opt/mcr -agreeToLicense yes -mode silent && \
    cd / && rm -rf mcr-install

    export FSL_FIX_MCRROOT=/opt/mcr



    # install FSL and configure CUDA
    wget https://fsl.fmrib.ox.ac.uk/fsldownloads/fslinstaller.py
    python2 fslinstaller.py -V 6.0.4 -d /opt/fsl
    echo '/opt/fsl/lib' > /etc/ld.so.conf.d/fsl.conf
    ldconfig
    cd /opt/fsl/bin && ln -sf eddy_cuda9.1 eddy_cuda

    export FSLDIR=/opt/fsl
    export FSL_DIR="${FSLDIR}"
    export FSLOUTPUTTYPE=NIFTI_GZ
    export PATH=/opt/fsl:$PATH
    export FSLMULTIFILEQUIT=TRUE
    export POSSUMDIR=/opt/fsl/bi
    export LD_LIBRARY_PATH=/opt/fsl/lib:$LD_LIBRARY_PATH
    export FSLTCLSH=/usr/bin/tclsh
    export FSLWISH=/usr/bin/wish

    # clean up a bit
    rm -f fslinstaller.py

    # symlink env so executable python scripts can find the
    # python installation on the PATH
    ln -s /usr/bin/env /bin/env

    # make /bin/sh point to bash instead
    echo "dash dash/sh boolean false" | debconf-set-selections
    DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash

    export LD_LIBRARY_PATH="/usr/lib:$LD_LIBRARY_PATH"
    export LD_LIBRARY_PATH="/opt/miniconda3/lib:$LD_LIBRARY_PATH"
    export PATH="/opt/convert3d/bin:$PATH"
    
    export LIBGL_ALWAYS_INDIRECT=0
    export QT_X11_NO_MITSHM=1

%environment

    __conda_setup="$('/opt/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "/opt/miniconda3/etc/profile.d/conda.sh" ]; then
            . "/opt/miniconda3/etc/profile.d/conda.sh"
        else
            export PATH="/opt/miniconda3/bin:$PATH"
            export LD_LIBRARY_PATH="/opt/miniconda3/lib:$LD_LIBRARY_PATH"
        fi
    fi
    unset __conda_setup

    export FSLDIR=/opt/fsl
    . $FSLDIR/etc/fslconf/fsl.sh
    export PATH=$FSLDIR/bin/:$PATH

    export LD_LIBRARY_PATH="/usr/lib:$LD_LIBRARY_PATH"
    export LD_LIBRARY_PATH="/opt/miniconda3/lib:$LD_LIBRARY_PATH"
    export PATH="/opt/convert3d/bin:$PATH"
    export LIBGL_ALWAYS_INDIRECT=0
    export QT_X11_NO_MITSHM=1

    # my favourite alias
    alias lr='ls -haltr'

%runscript

    echo "Container created ${NOW}"

    GITDIR=${2}
    echo "Git directory specified: ${GITDIR}"
    export BB_BIN_DIR=${GITDIR}
    . ${GITDIR}/init_vars
    echo "Subject directory: ${1}"
    echo "Running..."
    exec python -u ${GITDIR}/bb_pipeline_tools/bb_pipeline.py ${1} 


    

%labels
    Author nfrazier-logue@research.baycrest.org
    Version v1.0

%help
    This is a TVB-UKBB container installed with FSL 6.0.4 and CUDA 9.1.
    It provides all necessary software, with the exeption of AFNI, ANTS,
    and FreeSurfer, to run the TVB-UKBB pipeline.
